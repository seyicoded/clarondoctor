{
    "sourceFile": "screens/conversation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1638790930564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1638913612534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n import React, { useEffect, useState } from 'react';\n import * as Reuse from '../components/reusables'\n+import {Platform, TouchableOpacity, SafeAreaView } from 'react-native'\n import { Dimensions, FlatList, RefreshControl, View } from 'react-native';\n import AsyncStorage from '@react-native-async-storage/async-storage';\n import { Icon, Input, Layout, Text } from '@ui-kitten/components';\n import { Image, SafeAreaView, TouchableOpacity } from 'react-native';\n import DocumentPicker from 'react-native-document-picker'\n import * as API from '../api';\n+import { ActivityIndicator } from 'react-native-paper';\n \n let interval\n \n const Conversation = ({navigation, route}) =>{\n@@ -20,8 +22,10 @@\n     const [attachments, setattachments] = useState([])\n     const [attachmenttype, setattachmenttype] = useState()\n     const [attachmentsize, setattachmentsize] = useState()\n     const [error, seterror] = useState()\n+    const [selected, setSelected] = useState()\n+    const [sendingNow, setsendingNow] = useState(false)\n \n     const SendIcon = (props)=>{\n         return (\n             <TouchableOpacity onPress={send}>\n"
                },
                {
                    "date": 1638913654345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useEffect, useState } from 'react';\n import * as Reuse from '../components/reusables'\n-import {Platform, TouchableOpacity, SafeAreaView } from 'react-native'\n+import {Platform } from 'react-native'\n import { Dimensions, FlatList, RefreshControl, View } from 'react-native';\n import AsyncStorage from '@react-native-async-storage/async-storage';\n import { Icon, Input, Layout, Text } from '@ui-kitten/components';\n import { Image, SafeAreaView, TouchableOpacity } from 'react-native';\n"
                },
                {
                    "date": 1638914386917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n                         style={{marginBottom: 75}}\n                         refreshing={loading}\n                         showsVerticalScrollIndicator={false}\n                         refreshControl={<RefreshControl refreshing={loading} onRefresh={startStream} />}\n-                        renderItem={({item})=><Reuse.message email={email} message={item}/>}/>\n+                        renderItem={({item})=><Reuse.message email={email} message={item} item={item}/>}/>\n \n                     <Layout level={'2'} style={{bottom: 10, right: 10, left: 10, position: 'absolute'}}>\n                         { attachment ?\n                         ['image/jpg', 'image/png', 'image/jpeg'].includes(attachmenttype.toLowerCase()) ?\n"
                },
                {
                    "date": 1638914546345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n                         style={{marginBottom: 75}}\n                         refreshing={loading}\n                         showsVerticalScrollIndicator={false}\n                         refreshControl={<RefreshControl refreshing={loading} onRefresh={startStream} />}\n-                        renderItem={({item})=><Reuse.message email={email} message={item} item={item}/>}/>\n+                        renderItem={({item})=><Reuse.message email={email} message={item} chat={item}/>}/>\n \n                     <Layout level={'2'} style={{bottom: 10, right: 10, left: 10, position: 'absolute'}}>\n                         { attachment ?\n                         ['image/jpg', 'image/png', 'image/jpeg'].includes(attachmenttype.toLowerCase()) ?\n"
                },
                {
                    "date": 1638957656131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,12 @@\n import {Platform } from 'react-native'\n import { Dimensions, FlatList, RefreshControl, View } from 'react-native';\n import AsyncStorage from '@react-native-async-storage/async-storage';\n import { Icon, Input, Layout, Text } from '@ui-kitten/components';\n-import { Image, SafeAreaView, TouchableOpacity } from 'react-native';\n+import { SafeAreaView, TouchableOpacity } from 'react-native';\n import DocumentPicker from 'react-native-document-picker'\n import * as API from '../api';\n+import {Image} from 'react-native-elements'\n import { ActivityIndicator } from 'react-native-paper';\n \n let interval\n \n"
                },
                {
                    "date": 1638957675088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import { Icon, Input, Layout, Text } from '@ui-kitten/components';\n import { SafeAreaView, TouchableOpacity } from 'react-native';\n import DocumentPicker from 'react-native-document-picker'\n import * as API from '../api';\n+import firebase from 'firebase';\n import {Image} from 'react-native-elements'\n import { ActivityIndicator } from 'react-native-paper';\n \n let interval\n"
                },
                {
                    "date": 1638957689934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { Icon, Input, Layout, Text } from '@ui-kitten/components';\n import { SafeAreaView, TouchableOpacity } from 'react-native';\n import DocumentPicker from 'react-native-document-picker'\n import * as API from '../api';\n-import firebase from 'firebase';\n+// import firebase from 'firebase';\n import {Image} from 'react-native-elements'\n import { ActivityIndicator } from 'react-native-paper';\n \n let interval\n"
                },
                {
                    "date": 1638959700908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { Icon, Input, Layout, Text } from '@ui-kitten/components';\n import { SafeAreaView, TouchableOpacity } from 'react-native';\n import DocumentPicker from 'react-native-document-picker'\n import * as API from '../api';\n-// import firebase from 'firebase';\n+import firebase from 'firebase';\n import {Image} from 'react-native-elements'\n import { ActivityIndicator } from 'react-native-paper';\n \n let interval\n"
                },
                {
                    "date": 1638959813365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n         try{\n             let document = await DocumentPicker.pick({\n                 type: [DocumentPicker.types.allFiles],\n-                allowMultiSelection: true\n+                allowMultiSelection: false\n             })\n \n             let attached_files = []\n \n"
                },
                {
                    "date": 1638961110694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,23 +70,96 @@\n             console.log(e)\n         }\n     }\n \n+    // added methods\n+    const getFileName = (name, path)=> {\n+        if (name != null) { return name; }\n+\n+        if (Platform.OS === \"ios\") {\n+            path = \"~\" + path.substring(path.indexOf(\"/Documents\"));\n+        }\n+        return path.split(\"/\").pop();\n+    }\n+\n+    const getPlatformPath = ({ path, uri }) => {\n+        return Platform.select({\n+            android: { \"value\": uri },\n+            ios: { \"value\": uri }\n+        })\n+    }\n+\n+    const getPlatformURI = (imagePath) => {\n+        let imgSource = imagePath;\n+        if (isNaN(imagePath)) {\n+            imgSource = { uri: this.state.imagePath };\n+            if (Platform.OS == 'android') {\n+                imgSource.uri = \"file:///\" + imgSource.uri;\n+            }\n+        }\n+        return imgSource\n+    }\n+\n+    const uriToBlob = (uri) => {\n+        return new Promise((resolve, reject) => {\n+          const xhr = new XMLHttpRequest();\n+          xhr.onload = function() {\n+            // return the blob\n+            resolve(xhr.response);\n+          };\n+          \n+          xhr.onerror = function() {\n+            // something went wrong\n+            reject(new Error('uriToBlob failed'));\n+          };\n+          // this helps us get a blob\n+          xhr.responseType = 'blob';\n+          xhr.open('GET', uri, true);\n+          \n+          xhr.send();\n+        });\n+      }\n+\n     const send = async () => {\n \n+        let url, type\n+\n         if(message.length == 0){\n             return \n         }\n \n+        setsendingNow(true)\n+\n+        if(attachment){\n+            type = attachment.type\n+\n+            // adding\n+            // console.log(attachment)\n+            var path = getPlatformPath(attachment).value;\n+            var name = getFileName(attachment.name, path);\n+            console.log(name+'--'+path);\n+            // return false;\n+            try{\n+                var blob = await uriToBlob(attachment.uri);\n+                let attached = await firebase.storage().ref(`new-attaches/${name}`).put(blob, {contentType: type})\n+                url = await firebase.storage().ref(`new-attaches`).child(name).getDownloadURL()\n+                // console.log(url)\n+                // return false;\n+            }catch(e){\n+                console.log('*****')\n+                console.log(e)\n+            }\n+        }\n+\n         try{\n \n             let email = await AsyncStorage.getItem('_email')\n \n             let sent = API.sendMessage({\n                 message: message.trim(),\n                 recipient: route.params.user,\n-                attachment: null,\n-                file_type: null,\n+                attachment: url,\n+                file_type: type,\n                 sender: email,\n                 symptoms: []\n             })\n \n@@ -100,8 +173,10 @@\n         }catch(e){\n             console.log('message sending failed: ', e)\n         }\n \n+        setsendingNow(false)\n+\n     }\n \n     // sender, recipient, symptoms, message, attachment, file_type\n \n"
                },
                {
                    "date": 1638961135342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,13 @@\n             </TouchableOpacity>\n         )\n     }\n \n+    const LoadingIcon = (props) => (\n+        <ActivityIndicator {...props} color=\"green\"></ActivityIndicator>\n+    );\n+\n+\n     const attach = async () => {\n \n         try{\n             let document = await DocumentPicker.pick({\n"
                },
                {
                    "date": 1638961164443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,16 @@\n import React, { useEffect, useState } from 'react';\n import * as Reuse from '../components/reusables'\n import {Platform } from 'react-native'\n-import { Dimensions, FlatList, RefreshControl, View } from 'react-native';\n+import { Dimensions, FlatList, RefreshControl, View, ActivityIndicator } from 'react-native';\n import AsyncStorage from '@react-native-async-storage/async-storage';\n import { Icon, Input, Layout, Text } from '@ui-kitten/components';\n import { SafeAreaView, TouchableOpacity } from 'react-native';\n import DocumentPicker from 'react-native-document-picker'\n import * as API from '../api';\n import firebase from 'firebase';\n import {Image} from 'react-native-elements'\n-import { ActivityIndicator } from 'react-native-paper';\n+// import { ActivityIndicator } from 'react-native-paper';\n \n let interval\n \n const Conversation = ({navigation, route}) =>{\n"
                },
                {
                    "date": 1638961203797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n                         <>\n                         <TouchableOpacity style={{alignSelf: 'flex-end', padding: 10}} onPress={()=>setattachment(null)}><Icon name=\"close-outline\" style={{height: 20, width: 20}} fill={'grey'}/></TouchableOpacity>\n                         <Image source={{ uri: attachment.uri }} style={{height: 300, width: Dimensions.get('screen').width}} resizeMode={'contain'} />\n                         </> : <Text style={{margin: 10, flexDirection: 'row', alignItems: 'center'}} status={'primary'}>Attached: {attachment.name} <TouchableOpacity onPress={()=>setattachment(null)}><Icon name=\"trash-outline\" style={{height: 15, width: 15}} fill={'red'}/></TouchableOpacity></Text> : null }\n-                        <Input accessoryLeft={AttachIcon} size={'large'} value={message} onChangeText={setmessage} placeholder={'type your reply here...'} accessoryRight={SendIcon} />\n+                        <Input accessoryLeft={AttachIcon} size={'large'} value={message} onChangeText={setmessage} placeholder={'type your reply here...'} accessoryRight={sendingNow ? LoadingIcon: SendIcon} />\n                     </Layout>\n                 </Layout>\n             </SafeAreaView>\n         </Layout>\n"
                }
            ],
            "date": 1638790930564,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\nimport * as Reuse from '../components/reusables'\nimport { Dimensions, FlatList, RefreshControl, View } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Icon, Input, Layout, Text } from '@ui-kitten/components';\nimport { Image, SafeAreaView, TouchableOpacity } from 'react-native';\nimport DocumentPicker from 'react-native-document-picker'\nimport * as API from '../api';\n\nlet interval\n\nconst Conversation = ({navigation, route}) =>{\n    \n    const [email, setemail] = useState('')\n    const [user, setuser] = useState()\n    const [message, setmessage] = useState('')\n    const [loading, setloading] = useState(true)\n    const [conversation, setconversation] = useState([])\n    const [attachment, setattachment] = useState()\n    const [attachments, setattachments] = useState([])\n    const [attachmenttype, setattachmenttype] = useState()\n    const [attachmentsize, setattachmentsize] = useState()\n    const [error, seterror] = useState()\n\n    const SendIcon = (props)=>{\n        return (\n            <TouchableOpacity onPress={send}>\n                <Icon {...props} name=\"navigation-2-outline\"/>\n            </TouchableOpacity>\n        )\n    }\n\n    const AttachIcon = (props)=>{\n        return (\n            <TouchableOpacity onPress={attach}>\n                <Icon {...props} name=\"attach-outline\"/>\n            </TouchableOpacity>\n        )\n    }\n\n    const attach = async () => {\n\n        try{\n            let document = await DocumentPicker.pick({\n                type: [DocumentPicker.types.allFiles],\n                allowMultiSelection: true\n            })\n\n            let attached_files = []\n\n            document.map(attached=>{\n                if(attached.size/1024/1024 > 25){\n                    seterror(`${attached.name} cannot be attached. Exceed the maximum upload size (25MB).`)\n                }else{\n                    attached_files.push(attached)\n                }\n            })\n\n            setattachments(attached_files)    \n            setattachmenttype(attached_files[0].type)\n            setattachmentsize((attached_files[0].size/1024/1024).toFixed(2), 'MB')\n            setattachment(attached_files[0])\n        }catch(e){\n            console.log(e)\n        }\n    }\n\n    const send = async () => {\n\n        if(message.length == 0){\n            return \n        }\n\n        try{\n\n            let email = await AsyncStorage.getItem('_email')\n\n            let sent = API.sendMessage({\n                message: message.trim(),\n                recipient: route.params.user,\n                attachment: null,\n                file_type: null,\n                sender: email,\n                symptoms: []\n            })\n\n            if(sent){\n                setmessage('')\n                startStream()\n            }else{\n                seterror('There was an error sending your message')\n            }\n\n        }catch(e){\n            console.log('message sending failed: ', e)\n        }\n\n    }\n\n    // sender, recipient, symptoms, message, attachment, file_type\n\n    const startStream = async ()=>{\n        try{\n            let data = await API.getConversation(route.params.user)\n            setconversation(data)\n            setTimeout(()=>{\n                setloading(false)\n            }, 3000)\n        }catch(e){\n\n        }\n    }\n\n    useEffect(() => {\n        (async()=>{\n            setemail(await AsyncStorage.getItem('_email'))\n            startStream()\n            interval = setInterval(startStream, 10000)\n        })()\n        return ()=>{\n            clearInterval(interval)\n        }\n    }, [])\n\n    return (\n        <Layout style={{ flex: 1 }}>\n            <SafeAreaView style={{flex: 1}}>\n                <Layout style={{ flex: 1 }}>\n                    <Reuse.header title={route.params.name} nav={navigation}/>\n\n                    <FlatList\n                        inverted\n                        data={conversation}\n                        keyExtractor={item=>item.id}\n                        style={{marginBottom: 75}}\n                        refreshing={loading}\n                        showsVerticalScrollIndicator={false}\n                        refreshControl={<RefreshControl refreshing={loading} onRefresh={startStream} />}\n                        renderItem={({item})=><Reuse.message email={email} message={item}/>}/>\n\n                    <Layout level={'2'} style={{bottom: 10, right: 10, left: 10, position: 'absolute'}}>\n                        { attachment ?\n                        ['image/jpg', 'image/png', 'image/jpeg'].includes(attachmenttype.toLowerCase()) ?\n                        <>\n                        <TouchableOpacity style={{alignSelf: 'flex-end', padding: 10}} onPress={()=>setattachment(null)}><Icon name=\"close-outline\" style={{height: 20, width: 20}} fill={'grey'}/></TouchableOpacity>\n                        <Image source={{ uri: attachment.uri }} style={{height: 300, width: Dimensions.get('screen').width}} resizeMode={'contain'} />\n                        </> : <Text style={{margin: 10, flexDirection: 'row', alignItems: 'center'}} status={'primary'}>Attached: {attachment.name} <TouchableOpacity onPress={()=>setattachment(null)}><Icon name=\"trash-outline\" style={{height: 15, width: 15}} fill={'red'}/></TouchableOpacity></Text> : null }\n                        <Input accessoryLeft={AttachIcon} size={'large'} value={message} onChangeText={setmessage} placeholder={'type your reply here...'} accessoryRight={SendIcon} />\n                    </Layout>\n                </Layout>\n            </SafeAreaView>\n        </Layout>\n    );\n}\n\nexport default Conversation"
        }
    ]
}