{
    "sourceFile": "screens/main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1639044883540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639063525704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,10 @@\n import firestore from '@react-native-firebase/firestore';\n import { BottomNavigation, BottomNavigationTab, Icon, Button, Layout, Divider, Toggle } from '@ui-kitten/components';\n import * as API from '../api';\n \n+AsyncStorage.clear();\n+\n const call_options = {\n     ios: {\n       appName: 'ClarondocDoctors',\n     },\n"
                },
                {
                    "date": 1639063559428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,8 @@\n import firestore from '@react-native-firebase/firestore';\n import { BottomNavigation, BottomNavigationTab, Icon, Button, Layout, Divider, Toggle } from '@ui-kitten/components';\n import * as API from '../api';\n \n-AsyncStorage.clear();\n-\n const call_options = {\n     ios: {\n       appName: 'ClarondocDoctors',\n     },\n"
                }
            ],
            "date": 1639044883540,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\nimport RNCallKeep from 'react-native-callkeep';\nimport Chats from './tabs/chats';\nimport Calls from './tabs/calls';\nimport Manage from './tabs/manage';\nimport uuid from 'react-native-uuid';\nimport { Alert, PermissionsAndroid, SafeAreaView } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport messaging from '@react-native-firebase/messaging';\nimport firestore from '@react-native-firebase/firestore';\nimport { BottomNavigation, BottomNavigationTab, Icon, Button, Layout, Divider, Toggle } from '@ui-kitten/components';\nimport * as API from '../api';\n\nconst call_options = {\n    ios: {\n      appName: 'ClarondocDoctors',\n    },\n    android: {\n      alertTitle: 'Permissions required',\n      alertDescription: 'This application needs to access your phone accounts',\n      cancelButton: 'Cancel',\n      okButton: 'ok',\n      imageName: 'phone_account_icon',\n      additionalPermissions: [PermissionsAndroid.PERMISSIONS.READ_CONTACTS],\n      // Required to get audio in background when using Android 11\n      foregroundService: {\n        channelId: 'default',\n        channelName: 'Foreground service for my app',\n        notificationTitle: 'Incoming urgent connect',\n        notificationIcon: 'https://imageuploads01.s3.amazonaws.com/1607082935102-icon_inv.jpg',\n      }, \n    }\n};\nRNCallKeep.setup(call_options).then(accepted=>{})\nlet oncall = false\nlet call_id\nlet urgent\n\nconst { Navigator, Screen } = createBottomTabNavigator();\n\nconst ChatIcon = (props) => (\n    <Icon {...props} name='message-circle-outline'/>\n);\n\nconst BellIcon = (props) => (\n    <Icon {...props} name='bell-outline'/>\n);\n\nconst LockIcon = (props) => (\n    <Icon {...props} name='person-outline'/>\n);\n  \nconst CallIcon = (props) => (\n    <Icon {...props} name='phone-call-outline'/>\n);\n  \nconst AccountIcon = (props) => (\n    <Icon {...props} name='clipboard-outline'/>\n);\n\nconst BottomTabBar = ({ navigation, state }) => (\n  <BottomNavigation\n    selectedIndex={state.index}\n    onSelect={index => navigation.navigate(state.routeNames[index])}>\n    <BottomNavigationTab title='Chats' icon={ChatIcon}/>\n    <BottomNavigationTab title='Calls' icon={CallIcon}/>\n    <BottomNavigationTab title='More' icon={AccountIcon}/>\n  </BottomNavigation>\n);\n\nexport const MainScreen = ({navigation}) =>{\n    \n    const [online, setonline] = useState(false)\n\n    const updateStatus = async (online)=>{\n        setonline(online)\n\n        try{\n            let changed = await API.changeStatus(online ? 'Online' : 'Offline')\n\n            if(!changed){\n                statuserror(online)\n                return\n            }\n\n            await AsyncStorage.setItem('_status', online ? 'true' : 'false')\n        }catch(e){\n            statuserror(online)\n        }\n    };\n\n    const statuserror = async(online)=>{\n        setonline(!online)\n        Alert.alert('Not Changed', 'There was an error updating your online status', [\n            {\n                text: 'Retry',\n                onPress: ()=>updateStatus(online),\n                style: 'default'\n            },\n            {\n                text: 'Cancel',\n                onPress: ()=>setonline(!online),\n                style: 'cancel'\n            }\n        ])\n    }\n\n    const logout = async()=>{\n        navigation.navigate('Account')\n    }\n\n    useEffect(() => {\n        (async()=>{\n\n            let email = await AsyncStorage.getItem('_email')\n\n            setonline((await AsyncStorage.getItem('_status')) == 'true')\n            call_id = uuid.v4()\n\n            RNCallKeep.addEventListener('answerCall', ({ callUUID }) => {\n                // Do your normal `Answering` actions here.\n                navigation.navigate('Urgent', {channel: urgent.data().channel, token: urgent.data().token})\n            });\n\n            RNCallKeep.addEventListener('endCall', async ({ callUUID }) => {\n                // Do your normal `Answering` actions here.\n                await AsyncStorage.removeItem('_call')\n                if(urgent != null){\n                    firestore().collection('urgent').doc(urgent.id).delete()\n                }\n                RNCallKeep.endAllCalls()\n            });\n\n            RNCallKeep.addEventListener('didPerformSetMutedCallAction', (data)=>{\n                console.log(data.muted)\n            });\n\n            // RNCallKeep.displayIncomingCall(call_id, '0500000000', localizedCallerName = 'Urgent Care', handleType = 'generic')\n\n            firestore().collection('calls').where(\"recipient\", \"==\", email).onSnapshot(async snapshot=>{\n                console.log('Docs: ', snapshot.docs.length)\n                if(snapshot.docs.length > 0){\n                    urgent = snapshot.docs[0]\n                    let call = await AsyncStorage.removeItem('_call')\n\n                    if(call == null){\n                        await AsyncStorage.setItem('_call', urgent.data().channel)\n                        RNCallKeep.displayIncomingCall(urgent.data().channel, 'Urgent Care', localizedCallerName = 'Urgent Care', handleType = 'generic')\n                    }\n                }\n            }, e => {\n                console.log('Firebase Error: ', e)\n            })\n\n            // listen for foreground notifications\n            messaging().onMessage(async message => {\n\n                if(message.data.hasOwnProperty('call')){\n                    try{\n                        if(!oncall){\n                            oncall = true\n                            RNCallKeep.displayIncomingCall(call_id, '0500000000', localizedCallerName = `${message.notification.title}`, handleType = 'generic')\n                        }\n                        return;\n                    }catch(e){\n                        console.log('display incoming call error: ', e)\n                        return\n                    }\n                }\n\n                Alert.alert(message.notification.title, message.notification.body, [\n                {\n                    text: 'View',\n                    style: 'default',\n                    onPress: ()=>{\n                    if(message.data.title.includes('New message')){\n                        let sender = message.data.extraData1\n                        navigation.navigate('Conversation', { user: sender, name: message.data.title.replace('New message from ', '')})\n                    }\n                    }\n                },\n                {\n                    text: 'Dismiss',\n                    style: 'cancel',\n                    onPress: ()=>{}\n                }\n                ]);\n            })\n            // end listen for foreground notifications\n\n            // do something on notification open\n            messaging().onNotificationOpenedApp(message=>{\n                console.log('Notification opened: ', message)\n            })\n        })()\n    }, [])\n\n    return (\n        <Layout style={{flex: 1}}>\n            <SafeAreaView style={{flex: 1}}>\n                <Layout style={{flexDirection: 'row', padding: 15, justifyContent: 'space-between'}}>\n                    <Button onPress={()=>navigation.navigate('Notifications')} style={{height: 35, width: 35}} size={'small'} appearance={'outline'} accessoryLeft={BellIcon}></Button>\n                    <Toggle checked={online} onChange={updateStatus}/>\n                    <Button onPress={logout} style={{height: 35, width: 35}} size={'small'} appearance={'outline'} accessoryLeft={LockIcon}></Button>\n                </Layout>\n                <Divider/>\n                <Navigator screenOptions={{headerShown: false}} tabBar={props => <BottomTabBar {...props} />}>\n                    <Screen name='Chats' component={Chats}/>\n                    <Screen name='Calls' component={Calls}/>\n                    <Screen name='Manage' component={Manage}/>\n                </Navigator>\n            </SafeAreaView>\n        </Layout>\n    );\n}"
        }
    ]
}